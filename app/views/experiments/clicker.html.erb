<!-- 
TODO: better data structure for data table
TODO: reload image on resize
TODO: invalidate scale on resize (or rescale scale on resize, would need to store window size when scale was recorded)
TODO: rescale points when resizing
-->
<style>
html, body {
  width: 100%;
  height: 100%;
  margin: 0px;
  overflow: hidden;
}
td {
  vertical-align: top;
}
#clicker {
}
#control-panel {
  position: absolute;
  width: 18em;
  padding: 0.5em;
}
#data-table-owner {
  position: absolute;
  top: 16em;
  left: 1em;
  padding: 0.5em;
  width: 40em;
}
#plot-placeholder {
  width: 30em;
  height: 24em;
}
#control-panel table {
  width: 12em;
  table-layout: fixed;
}
#control-panel table td {
  border: 0px;
  padding: 0px;
}
h3 { 
  padding: 0.5em;
  margin: 0em;
}


</style>

<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/themes/ui-lightness/jquery-ui.css" type="text/css" media="all">
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js"></script>
<script src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.2/jquery.dataTables.min.js"></script>

<%= javascript_include_tag 'clicker' %>

<% # initialize the clicker state
  clip = @experiment.videoclip
  framenum_min = Frame.where('frames.videoclip_id = ?', clip.id).order('frames.framenum ASC').first.framenum
  framenum_max = Frame.where('frames.videoclip_id = ?', clip.id).order('frames.framenum DESC').first.framenum
  frame = Frame.where(:framenum => framenum_min).first
  clip_path = File.join("../../../","data","video",clip.path)
  frame_path = File.join("frame", "%04d.jpg" % frame.framenum)
  imgurl = File.join(clip_path, frame_path)

	fps = clip.fpss.to_f
%>

<div id="control-panel" class="ui-draggable ui-widget-content">
  <h3 class=ui-widget-header>Control</h3>
  <div id="control-panel-accordion">
    <h3><a href="#">Video Parameters</a></h3>
    <div>
      <p> Video FPS: <input id='txt-fps' type=textbox size=5></input> </p>
    </div>
    <h3><a href="#">Video Size Scale</a></h3>
    <div>
      <table style="margin-bottom: 1em">
        <tr><td colspan=2><button class="ui-widget ui-button" id='btn-measure-scale' onclick="start_measuring();">start measuring</button></td></tr>
        <tr>
          <td>Length:</td>
          <td><input id='scale-distance-known' type=textbox size=5 value=""></input></td>
        </tr>
        <tr>
          <td>Units:</td>
          <td><input id='scale-distance-units' type=textbox size=5 value=""></input></td>
        </tr>
        <tr>
          <td colspan=2><button class="ui-widget ui-button" id='btn-set-scale' onclick="set_scale();">save and apply</button></td>
        </tr>
      </table>
    </div>
    <h3><a href="#">Control</a></h3>
    <div>
      <table>
        <tr> <td>Frame</td> <td><span id="display-frame"></span></td> </tr>
        <tr> <td>Time</td>  <td><span id="display-time"></span></td>  </tr>
        <tr> <td colspan=2></td> </tr>
        <tr> <td><i>Frame skip:</i></td><td> <input size=4 id="skip-distance" type=textbox value=1>  </input></td></tr>
      </table>
      <hr>
      <button id="control-start" onclick="load_start_frame();">start</button>||
      <button id="control-previous" onclick="load_previous_frame();">previous</button>
      <button id="control-next" onclick="load_next_frame();">next</button><br />
    </div>
  </div>
</div>

<div id="data-table-owner" class="ui-widget-content ui-draggable">
  <h3 class="ui-widget-header">Data</h3>
  <div id=data-table-tabs>
    <ul>
      <li><a href="#data-tabs-1">Table</a></li>
      <li><a href="#data-tabs-2">Plot</a></li>
    </ul>
    <div id=data-tabs-1> <table id="data-table"> </table> </div>
    <div id=data-tabs-2> <div id="plot-placeholder"></div> </div>
  </div>
</div>

<div id="clicker"> 
  <canvas id="imgbox"></canvas> 
</td>

<script type="text/javascript">

function zeroFill( number, width ) {
  width -= number.toString().length;
  if ( width > 0 )
  {
    return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
  }
  return number + ""; // always return a string
}

var c = document.getElementById("imgbox");
var ctx = c.getContext("2d");

var framenum_min = <%= framenum_min %>;
var framenum_max = <%= framenum_max %>;
var initial_fps = <%= fps %>;

var is_measuring = 0;

var scale_start_point = null;
var scale_end_point = null;

var scale = {
  x0: null,
  y0: null,
  x1: null,
  y1: null,
  length_known: null,
  units: null
}

var cur_framenum = framenum_min;

var points = Array();
var imgwidth;
var imgheight;

var scale_length_px = 1;

var scale_known_distance = 1;
var scale_known_units = "px";

var is_recording = 1;

function start_measuring() {
  is_measuring = 1;
  scale_start_point = null;
  scale_end_point = null;
  $('#btn-measure-scale').html("click two points");
}

function stop_measuring() {
  $('#btn-measure-scale').html("start measuring");
  is_measuring = 0;
} 

function fps() {
  return $('#txt-fps').val();
}

function reset_data() {
}

function fit_canvas_to_window() {
  var c = document.getElementById("imgbox");
  var ctx = c.getContext("2d");

  ctx.canvas.width = $("body").width();
  ctx.canvas.height = $("body").height();
  load_frame(cur_framenum);
}

function load_frame(framenum) {
  var clip_path = "../../../data/video/<%= clip.path %>";
  var frame_path = "frame/" + zeroFill( framenum, 4 ) + ".jpg";
  var imgurl = clip_path + "/" + frame_path;

  var img = new Image();
  img.onload = function() {
    var aspect = this.height / this.width;
    var ctx_aspect = c.height / c.width;
    
    // if this img is shorter, fit the width and shrink the height
    if (aspect < ctx_aspect) {
      imgwidth = c.width;
      imgheight = c.height * aspect / ctx_aspect;
    // if this img is wider, fit the height and shrink the width
    } else {
      imgwidth = c.width * ctx_aspect / aspect;
      imgheight = c.height;
    }
    ctx.drawImage(this,0,0,imgwidth,imgheight);
    var disptime = document.getElementById("display-time");
    var disptime = document.getElementById("display-time");
    var curtime = (cur_framenum-1)/fps();
    $("#display-time").html(curtime.toFixed(3) + " (s)");
    $("#display-frame").html((cur_framenum-1));
    render_points();
  } 
  cur_framenum = framenum;
  img.src = imgurl;

}

function render_points() {
  var c = document.getElementById("imgbox");
  var ctx = c.getContext("2d");

  var pdata = [];
  ctx.fillStyle = "yellow";

  $(points).each(function() {
    ctx.fillRect(this.px_x(imgwidth)-1, this.px_y(imgheight)-1, 3, 3);
    pdata.push(this.toTuple(scale_known_distance,scale_length_px));
  });

  ctx.fillStyle = "red";

  if( scale_start_point ) {
    ctx.fillRect(scale_start_point.px_x(imgwidth)-1, scale_start_point.px_y(imgheight)-1,3,3);
  }

  if( scale_end_point ) {
    ctx.fillRect(scale_end_point.px_x(imgwidth)-1, scale_end_point.px_y(imgheight)-1,3,3);
  }

  if( scale_start_point && scale_end_point ) {
    ctx.strokeStyle = "green";
    ctx.lineWidth = 2;
    ctx.beginPath()
    ctx.moveTo( scale_start_point.px_x(imgwidth), scale_start_point.px_y(imgheight) );
    ctx.lineTo( scale_end_point.px_x(imgwidth), scale_end_point.px_y(imgheight) );
    ctx.stroke();
  }
  
  plot_d3_graph(pdata);
  /*
  var options = {
    series: {
      lines: { show: true }, 
      points: { show: true }
    }
  };
  $.plot( $("#plot-placeholder"), pdata, options );
  */

}

function plot_d3_graph(data) {}
function plot_3d_graph() {
  var w = 300;
  var h = 300;
  var x = d3.scale.linear().domain([0, 30]).range([0, w]);
  var y = d3.scale.linear().domain([0, 2]).range([0, h]);
  var vis = d3.select("#plot-placeholder")
              .data(data)
            .append("svg:svg")
              .attr("width",w+50)
              .attr("height",h+50)
            .append("svg:g")
              .attr("transform", "translate(20,0)");
  var rules = vis.selectAll("g.rule")
      .data(x.ticks(15))
    .enter().append("svg:g")
      .attr("class","rule");

  rules.append("svg:line")
    .attr("x1",x)
    .attr("x2",x)
    .attr("y1",0)
    .attr("y2",h1);
}

function load_start_frame() {
  load_frame(framenum_min);
}

function load_previous_frame() {
  var frame_skip = Number($('#skip-distance').val());
  if (cur_framenum - frame_skip >= framenum_min) {
    load_frame(cur_framenum - frame_skip);
  }
}

function has_previous_frame() {
  var frame_skip = Number($('#skip-distance').val());
  return cur_framenum - frame_skip >= framenum_min;
}

function load_next_frame() {
  var frame_skip = Number($('#skip-distance').val());
  if (cur_framenum + frame_skip <= framenum_max ) {
    load_frame(cur_framenum + frame_skip);
  }
}

function has_next_frame() {
  var frame_skip = Number($('#skip-distance').val());
  return cur_framenum + frame_skip <= framenum_max;
} 


function set_scale_length(l) {
  scale_length_px = l;
}

function set_scale() {
  scale_length_px      = scale_end_point.distance_to(scale_start_point);
  scale_known_distance = Number($('#scale-distance-known').val());
  scale_known_units    = $('#scale-distance-units').val();

  $.post( 
    "/experiments/" + <%= @experiment.id %> + "/set_scale/",
    { scale: {
        x0: scale_start_point.x,
        y0: scale_start_point.y,
        x1: scale_end_point.x,
        y1: scale_end_point.y,
        measured_length: scale_known_distance,
        measured_units: scale_known_units
      }
    },
    function (data) {
      console.log("posted scale");
    }
  );

  reset_data_table();
}

function reset_data_table() {
  var t = $('#data-table');

  t.html('<thead><tr><td>T (s)</td><td>X (' + scale_known_units + ')</td><td>Y (' + scale_known_units + ')</td></tr></thead>');

  t.append('<tbody>');
  $(points).each(
    function() {
      t.append(this.toTableRow(scale_known_distance, scale_length_px));
    }
  );
  t.append('</tbody>');
}

function start_recording() {
  is_recording = 1;
  // TODO reset canvas
}

function click_handler(e) {
  console.log('handling click event');
  // where in the canvas was the click
  var x = 1.0 * (e.pageX - $('#imgbox').offset().left);
  var y = 1.0 * (e.pageY - $('#imgbox').offset().top);

  // where in the image was the click in the canvas
  var xprime = x / imgwidth;
  var yprime = y / imgheight;

  if (is_measuring) {
    console.log('measuring scale length');
    if (scale_start_point == null) {
      scale_start_point = new DataPoint(0,0,xprime,yprime);
      render_points();
    } else if (scale_end_point == null) {
      scale_end_point = new DataPoint(0,0,xprime,yprime);
      render_points();
      set_scale_length(scale_end_point.distance_to(scale_start_point));
      stop_measuring();
    }
  } else if (is_recording) {
    console.log('recording normal click event');
    var curtime = (cur_framenum-1)/fps();
    var pt = new DataPoint(cur_framenum,curtime,xprime,yprime);
    //$.post('/ajaxtest/123', function(data) {
    //  console.log("returned from ajaxtest");
    //});
    $.post('/experiments/' + <%= @experiment.id %> + '/add_datum/',
      { datum: { 
          frame: cur_framenum,
          time: curtime,
          x: xprime,
          y: yprime }
      },
      function(data) {
        console.log('submitted datum: ' + data);
      }
    );
    points.push(pt);
    $("#data-table").append(pt.toTableRow(scale_known_distance, scale_length_px));
    if (has_next_frame()) {
      load_next_frame();
    } else {
      is_recording = 0;
      render_points();
    }
  } else {
    console.log('unexpected click event state');
  }
}

$(document).ready(function() {
  $(window).resize(function() {
    fit_canvas_to_window();
  });
  $("#control-panel").draggable();
  $("#control-panel-accordion").accordion({collapsible: true});
  $("#data-table-accordion").accordion({collapsible: true});
  $("#data-table-owner").draggable();
  $("#data-table-tabs").tabs();
//  $("#data-table-owner").accordion({collapsible: true});
  $("#txt-fps").val(initial_fps);
  $("#control-previous").button({
    text: false,
    icons: {
      primary: "ui-icon-seek-prev"
    }
  });
  $("#control-next").button({
    text: false,
    icons: {
      primary: "ui-icon-seek-next"
    }
  });
  $(function() {
    $( "input:submit, a, button" ).button();
  });
  $("#imgbox").click(function(e) { 
    click_handler(e); 
  });

  $.ajax( {
    type: "GET",
    dataType: "json",
    url: "/experiments/" + <%= @experiment.id %> + "/data.json",
    success: function(data) {
      console.log("received existing data points, n = " + data.length);
      $.each(data, function() {
        console.log("loading datum: " + this.frame + ", " + this.time + ", " + this.x + ", " + this.y);
        points.push(new DataPoint(this.frame, this.time, this.x, this.y));
      });
    },
    complete: function() {
      ajax_load_scale();
    }
  });
});

function ajax_load_scale() {
  $.ajax( {
    type: "GET",
    dataType: "json",
    url: "/experiments/" + <%= @experiment.id %> + "/scales.json",
    success: function (data) {
      console.log("received existing scale, n = " + data.length);
      if (data.length > 0) {
        s = data[0];
        scale_start_point = new DataPoint(0,0,s.x0,s.y0);
        scale_end_point   = new DataPoint(0,0,s.x1,s.y1);
        scale_length_px   = s.measured_length;
        scale_known_units = s.measured_units;
        $("#scale-distance-known").val(s.measured_length);
        $("#scale-distance-units").val(s.measured_units);
      }
    },
    complete: function() { finish_init(); }
  });
}

// this is call once we have async loaded any data for this experiment
// TODO dehackify this
function finish_init() {
  start_recording();

  reset_data_table();
    
  fit_canvas_to_window(); // this also loads the initial frame

  // now position all the toolbars
  $("#control-panel").offset( { left: 16, top: 16 } );
  $("#data-table-owner").offset( { left: $("body").width() - $("#data-table-owner").width() - 32, top: 16 } );
}

</script>


